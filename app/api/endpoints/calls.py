from fastapi import APIRouter, Request, Depends
from sqlalchemy.orm import Session
import json
from datetime import datetime 
import logging

from app.core.database import get_session
from app.models.CallCrm import CallCrmDriverUs

router = APIRouter()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@router.post("/webhook/lead")
async def receive_webhook(request: Request, db: Session = Depends(get_session)):
    try:
        payload = await request.json()
        logger.info("üì• Webhook recibido:")
        logger.info(json.dumps(payload, indent=2, ensure_ascii=False))

        call_data = payload.get('data', {})
        custom_data = payload.get('customData', {})  # üëà extraemos customData

        # Registrar customData si est√° presente
        if custom_data:
            logger.info("üìû Registrando llamada desde customData")

            call = CallCrmDriverUs(
                user_from=custom_data.get("user_from"),
                stamp_time=custom_data.get("stamp_time"),
                status_call=custom_data.get("status_call"),
                duration=custom_data.get("duration"),
                contact_id=custom_data.get("contact_id"),
                direction=custom_data.get("direction")
            )
            db.add(call)
            db.commit()
            db.refresh(call)
            db.close()

            logger.info(f"‚úÖ Llamada registrada con UUID: {call.uuid}")
        else:
            logger.warning("‚ö†Ô∏è No se encontr√≥ 'customData' en el webhook")

        # An√°lisis adicional (grabaci√≥n, duraci√≥n, etc.)
        if call_data.get('answered_at'):
            logger.info("‚úÖ Llamada ATENDIDA")

            duration = call_data.get('duration', 0)
            answered_at = call_data.get('answered_at', 0)
            ended_at = call_data.get('ended_at', 0)

            talk_time = ended_at - answered_at if all([answered_at, ended_at]) else 0

            if talk_time < 5:
                logger.warning(f"‚ö†Ô∏è Grabaci√≥n corta o vac√≠a. Duraci√≥n: {talk_time}s")

            if not call_data.get('recording'):
                logger.error("‚ùå No se encontr√≥ URL de grabaci√≥n")

        elif call_data.get('missed_call_reason'):
            logger.warning(f"‚õî Llamada NO atendida: {call_data['missed_call_reason']}")
        else:
            logger.warning("‚ö†Ô∏è Estado de llamada desconocido")

        return {"status": "ok", "message": "llamada recibida"}

    except Exception as e:
        logger.exception("‚ùå Error al procesar el webhook")
        return {"status": "error", "message": str(e)}